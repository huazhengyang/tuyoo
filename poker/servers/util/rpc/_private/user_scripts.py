# -*- coding: utf-8 -*-
"""
Created on 2015-12-2
@author: zqh
"""
MAIN_SET_HASH_DATA_FORCE = '\nlocal ukey = KEYS[1]\nlocal datas = cjson.decode(KEYS[2])\nredis.call("hmset", ukey, unpack(datas));\n'
FUN_TY_TOBMBER = '\nlocal function ty_tonumber(val)\n    val = tonumber(val)\n    if val == nil then\n        return 0\n    end\n    return val\nend\n'
FUN_INCR_HASH_CHIP_FIELD = (FUN_TY_TOBMBER + "\nlocal function incr_hash_field(key, field, delta, mode, lowLimit, highLimit)\n    local cur = ty_tonumber(redis.call('hget', key, field))\n    local final = cur\n    local fixed = 0\n    if cur < 0 then\n        fixed = -cur\n        final = ty_tonumber(redis.call('hincrby', key, field, fixed))\n        cur = final\n    end\n    if lowLimit ~= -1 and cur < lowLimit then\n        return {0, final, fixed}\n    end\n    if highLimit ~= -1 and cur > highLimit then\n        return {0, final, fixed}\n    end\n    if delta >= 0 or cur + delta >= 0 then\n        final = ty_tonumber(redis.call('hincrby', key, field, delta))\n        return {delta, final, fixed}\n    end\n    if mode == 0 or cur == 0 then\n        return {0, cur, fixed}\n    end\n    final = ty_tonumber(redis.call('hincrby', key, field, -cur))\n    return {-cur, final, fixed}\nend\n")
MAIN_INCR_CHIP_LUA_SCRIPT = (FUN_INCR_HASH_CHIP_FIELD + '\nlocal delta = ty_tonumber(KEYS[1])\nlocal lowLimit = ty_tonumber(KEYS[2])\nlocal highLimit = ty_tonumber(KEYS[3])\nlocal mode = ty_tonumber(KEYS[4])\nlocal mkey = KEYS[5]\nlocal filed = KEYS[6]\nlocal cur_final_fixed = incr_hash_field(mkey, filed, delta, mode, lowLimit, highLimit)\nreturn {cur_final_fixed[1], cur_final_fixed[2], cur_final_fixed[3]}\n')
MAIN_MOVE_CHIP_TO_TABLE_LUA_SCRIPT = (FUN_INCR_HASH_CHIP_FIELD + "\nlocal userId = ty_tonumber(KEYS[1])\nlocal gameId = ty_tonumber(KEYS[2])\nlocal _min = ty_tonumber(KEYS[3])\nlocal _max = ty_tonumber(KEYS[4])\nlocal tkey = KEYS[5]\nlocal tfield = KEYS[6]\n\n-- \xe4\xbf\xae\xe5\xa4\x8dtchip<0\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\nlocal tfixed = 0\nlocal tchip = ty_tonumber(redis.call('hget', tkey, tfield))\nif tchip < 0 then\n    tfixed = -tchip\n    tchip = ty_tonumber(redis.call('hincrby', tkey, tfield, tfixed))\nend\n\n-- \xe4\xbf\xae\xe5\xa4\x8dchip<0\xe7\x9a\x84\xe9\x97\xae\xe9\xa2\x98\nlocal key = 'user:'..userId\nlocal field = 'chip'\nlocal fixed = 0\nlocal chip = ty_tonumber(redis.call('hget', key, field))\nif chip < 0 then\n    fixed = -chip\n    chip = ty_tonumber(redis.call('hincrby', key, field, fixed))\nend\n\n-- \xe8\xa7\xa3\xe6\x9e\x90 -1, -2, -3 flag\xe4\xb8\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84 chip \xe5\x80\xbc:\n-- -1 chip+tablechip, -2:tablechip, -3:chip, >0: \xe5\x8e\x9f\xe6\xa0\xb7\xe8\xbf\x94\xe5\x9b\x9e\nlocal function parse_flag(_flag_, _chip_, _tablechip_)\n    if _flag_ == -1 then\n        return _tablechip_ + _chip_\n    elseif _flag_ == -2 then\n        return _tablechip_\n    elseif _flag_ == -3 then\n        return _chip_\n    else\n        return _flag_\n    end\nend\n_min = parse_flag(_min, chip, tchip)\n_max = parse_flag(_max, chip, tchip)\n\nlocal allchip = chip + tchip\n\n--------------------------------------------------------------------------------\n-- \xe6\xa3\x80\xe6\x9f\xa5\xe4\xb8\x8a\xe3\x80\x81\xe4\xb8\x8b\xe9\x99\x90\xef\xbc\x8c\xe4\xb8\xba target \xe5\x8f\x96 [0, allchip] \xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x80\xbc\n\n-- 0. \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8b\xe9\x99\x90 > allchip\xef\xbc\x8c\xe4\xbb\xa4\xe4\xb8\x8b\xe9\x99\x90=\xe4\xb8\x8a\xe9\x99\x90=tablechip\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d\xe4\xb8\x8d\xe5\x81\x9a\xe4\xbb\xbb\xe4\xbd\x95\xe7\x9c\x9f\xe6\xad\xa3\xe6\x93\x8d\xe4\xbd\x9c\nif _min > allchip then\n    _min = tchip\n    _max = tchip\nend\n\n-- 1. \xe4\xb8\x8a\xe9\x99\x90\xe8\xb6\x85\xe5\x87\xba allchip \xe6\x97\xb6\xef\xbc\x8c\xe4\xb8\x8a\xe9\x99\x90\xe5\x8f\x96allchip\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d _max <= allchip\nif _max > allchip then\n    _max = allchip\nend\n\n-- 2. \xe4\xb8\x8a\xe9\x99\x90\xe5\xb0\x8f\xe4\xba\x8e\xe4\xb8\x8b\xe9\x99\x90\xe6\x97\xb6\xef\xbc\x8c\xe4\xbb\xa4\xe4\xb8\x8a\xe9\x99\x90=\xe4\xb8\x8b\xe9\x99\x90\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d _min <= _max\nif _min > _max then\n    _max = _min\nend\n\n-- \xe5\x88\xb0\xe6\xad\xa4\xef\xbc\x8c0 <= _min <= _max <= allchip \xe6\x88\x90\xe7\xab\x8b\xef\xbc\x8c\xe5\x8f\x96target\xe4\xb8\xba\xe6\x9c\x80\xe5\xa4\xa7\xef\xbc\x9a\nlocal target = _max\n\n--------------------------------------------------------------------------------\n\nlocal diff = tchip - target\n\nif diff == 0 then\n    return {0, tchip, tfixed, 0, chip, fixed}\nend\n\nlocal chipRet = incr_hash_field(key, field, diff, 0, -1, -1)\n\n-- \xe5\xa4\x9a\xe9\x80\x80\xe5\xb0\x91\xe8\xa1\xa5\xe6\x88\x90\xe5\x8a\x9f\nif chipRet[1] == diff then\n    -- \xe5\xa4\x9a\xe9\x80\x80\xe5\xb0\x91\xe8\xa1\xa5\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe8\xae\xb0\xe5\xbd\x95tchip\xe6\x97\xa5\xe5\xbf\x97\n    tchip = ty_tonumber(redis.call('hincrby', tkey, tfield, -diff))\nelse\n    diff = 0\nend\n\nreturn {-diff, tchip, tfixed, chipRet[1], chipRet[2], chipRet[3]}\n")