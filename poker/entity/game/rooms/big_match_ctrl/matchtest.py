# -*- coding: utf-8 -*-
"""
Created on 2014年9月24日

@author: zjgzzz@126.com, zhouhao@tuyoogame.com
"""
import time
from poker.entity.game.rooms.big_match_ctrl.config import MatchConfig
from poker.entity.game.rooms.big_match_ctrl.interfacestest import UserDatabase, SigninDatabase, TableControllerTest, PlayerNotifierTest, SigninRecordDaoTest, MatchStatusDaoTest, SigninFeeTest, UserInfoLoaderTest, MatchRewardsTest, PlayerLocationTest
from poker.entity.game.rooms.big_match_ctrl.match import TableManager, Match
from poker.entity.game.rooms.big_match_ctrl.utils import Utils
import stackless
from freetime.core.timer import FTTimer
from freetime.core.reactor import mainloop
userdb = UserDatabase()
signindb = SigninDatabase()
tableController = TableControllerTest(userdb)
playerLocation = PlayerLocationTest(userdb)
playerNotifier = PlayerNotifierTest()
signinRecordDao = SigninRecordDaoTest(signindb)
matchStatusDao = MatchStatusDaoTest()
signinFee = SigninFeeTest(userdb)
userInfoLoader = UserInfoLoaderTest(userdb)
matchRewards = MatchRewardsTest(userdb)

def initUsers():
    pass

def buildMatch(conf):
    pass
matchTips = {'infos': ['\xe5\xbd\x93\xe7\xa7\xaf\xe5\x88\x86\xe7\x9b\xb8\xe5\x90\x8c\xe6\x97\xb6\xef\xbc\x8c\xe6\x8c\x89\xe6\x8a\xa5\xe5\x90\x8d\xe5\x85\x88\xe5\x90\x8e\xe9\xa1\xba\xe5\xba\x8f\xe7\xa1\xae\xe5\xae\x9a\xe5\x90\x8d\xe6\xac\xa1\xe3\x80\x82', '\xe9\x99\xa4\xe6\xb5\xb7\xe9\x80\x89\xe8\xb5\x9b\xe9\x98\xb6\xe6\xae\xb5\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe5\x8a\x9b\xe4\xba\x89\xe7\xac\xac\xe4\xb8\x80\xe6\x89\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x99\x8b\xe7\xba\xa7\xef\xbc\x81', '\xe5\xa4\xa9\xe7\x94\x9f\xe6\x88\x91\xe6\x9d\x90\xe5\xbf\x85\xe6\x9c\x89\xe7\x94\xa8\xef\xbc\x8c\xe6\x9c\x89\xe7\x94\xa8\xe5\xb0\xb1\xe5\xbe\x97\xe6\x96\x97\xe5\x9c\xb0\xe4\xb8\xbb\xef\xbc\x81', '\xe5\xbf\xbd\xe5\xa6\x82\xe4\xb8\x80\xe5\xa4\x9c\xe6\x98\xa5\xe9\xa3\x8e\xe6\x9d\xa5\xef\xbc\x8c\xe5\x8d\x83\xe4\xba\xba\xe4\xb8\x87\xe4\xba\xba\xe7\x89\x8c\xe6\xa1\x8c\xe5\xbc\x80\xef\xbc\x81', '\xe6\x99\xae\xe9\x80\x9a\xe5\x9c\xba\xe8\x8e\xb7\xe5\xbe\x97\xe5\x8b\x8b\xe7\xab\xa0\xe6\x97\xb6\xef\xbc\x8c\xe8\xae\xb0\xe5\xbe\x97\xe9\xa2\x86\xe5\x8f\x96\xe7\x9b\xb8\xe5\xba\x94\xe5\xa5\x96\xe5\x8a\xb1\xe5\x93\xa6\xe3\x80\x82', '\xe4\xb8\x87\xe4\xba\xba\xe6\xaf\x94\xe8\xb5\x9b\xe7\x81\xab\xe7\x83\xad\xe4\xb8\x8a\xe7\xba\xbf\xef\xbc\x8c\xe8\xae\xb0\xe5\xbe\x97\xe8\xa6\x81\xe5\x85\xb3\xe6\xb3\xa8\xe5\x93\xa6\xe3\x80\x82', '\xe6\xb5\xb7\xe9\x80\x89\xe9\x98\xb6\xe6\xae\xb5\xe8\xa6\x81\xe7\xa8\xb3\xe6\x89\x93\xef\xbc\x8c\xe4\xbd\x8e\xe4\xba\x8e\xe5\x9f\xba\xe7\xa1\x80\xe5\x88\x86\xe4\xbc\x9a\xe8\xa2\xab\xe6\xb7\x98\xe6\xb1\xb0\xe5\x93\x9f\xef\xbc\x81'], 'interval': 5}
match_conf_612 = {'desc': '\xe5\xbc\x80\xe8\xb5\x9b\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x9a\xe6\xbb\xa13\xe4\xba\xba\xe5\xbc\x80\xe8\xb5\x9b\n\xe8\xb5\x9b\xe5\x88\xb6\xef\xbc\x9a\xe5\xae\x9a\xe5\xb1\x80\xe6\xb7\x98\xe6\xb1\xb0(\xe5\x85\xb11\xe5\xb1\x80,\xe6\xaf\x8f\xe5\xb1\x802\xe5\x89\xaf\xe7\x89\x8c)\n\xe6\x8a\xa5\xe5\x90\x8d\xe8\xb4\xb9\xe7\x94\xa8\xef\xbc\x9a5000\xe9\x87\x91\xe5\xb8\x81', 'table.seat.count': 3, 'tips': matchTips, 'start': {'type': 1, 'user.size': 3, 'maxplaytime': (60 * 60), 'fee.type': 1}, 'fees': [{'name': 'CHIP', 'count': 5000}], 'stages': [{'type': 2, 'name': '\xe5\x86\xb3\xe8\xb5\x9b', 'animation.type': 3, 'seat.principles': 1, 'card.count': 2, 'rise.user.count': 1, 'chip.user': 1000, 'chip.user.3.base': 0, 'chip.base': 100, 'chip.times': (60 * 60), 'chip.grow': 0.5}], 'rank.rewards': [{'ranking': {'start': 1, 'end': 1}, 'rewards': [{'name': 'CHIP', 'count': 10000}, {'name': 'EXP', 'count': 200}, {'name': '1012', 'count': 1}], 'desc': u'10000\u91d1\u5e01+\u7279\u60e0\u793c\u5305'}, {'ranking': {'start': 2, 'end': 2}, 'rewards': [{'name': 'CHIP', 'count': 3500}, {'name': 'EXP', 'count': 60}, {'name': '1012', 'count': 1}], 'desc': u'3500\u91d1\u5e01+\u7279\u60e0\u793c\u5305'}, {'ranking': {'start': 3, 'end': 3}, 'rewards': [{'name': '1012', 'count': 1}], 'desc': u'\u7279\u60e0\u793c\u5305'}]}

def matchStart():
    pass
if (__name__ == '__main__'):
    FTTimer(1, matchStart)
    stackless.tasklet(mainloop)()
    stackless.run()
    for user in userdb.users.values():
        print 'userId=', user.userId, 'location=', user.location
    print 'ok'