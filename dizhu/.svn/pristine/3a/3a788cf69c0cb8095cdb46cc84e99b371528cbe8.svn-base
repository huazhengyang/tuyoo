# -*- coding:utf-8 -*-
"""
Created on 2017年2月15日

@author: zhaojiangang
"""
from dizhu.servers.util.rpc import new_table_winlose
from dizhu.games.normalbase.tableproto import DizhuTableProtoNormalBase
from poker.protocol import router
import freetime.util.log as ftlog
import dizhu.entity.skillscore as skillscore


class DizhuTableProtoNormal(DizhuTableProtoNormalBase):
    def __init__(self, tableCtrl):
        super(DizhuTableProtoNormal, self).__init__(tableCtrl)
    
    def buildResultDetails(self, result):
        luckyItemArgs = []
        winStreak = []
        skillScoreInfos = []
        cards = []
        addCoupons = []
        seatDetails = []
        seatInfos = []
        for sst in result.seatStatements:
            waittime = self.table.runConf.optimeCall
            if sst.final < self.table.runConf.minCoin:
                waittime = int(waittime/3)
            
            datas = {}
            try:
                datas = new_table_winlose.queryDataAfterWinlose(sst.seat.userId,
                                                                self.bigRoomId,
                                                                sst.isWin,
                                                                sst.winStreak,
                                                                result.slam,
                                                                result.isChuntian,
                                                                sst.seat.player.clientId)
            except Exception, e:
                ftlog.warn('DizhuTableProtoNormal.buildResultDetails',
                           'userId=', sst.seat.player.userId,
                           'roomId=', self.roomId,
                           'tableId=', self.tableId,
                           'ex=', str(e))

            # 兼容老版本
            gameClientVer = sst.seat.player.gameClientVer
            if ftlog.is_debug():
                ftlog.debug('DizhuTableProtoNormal.buildResultDetails',
                            'gameClientVer=', gameClientVer,
                            'userId=', sst.seat.player.userId)

            tbbox = datas.get('tbbox', [0, 0])
            details = [
                sst.delta,
                sst.final,
                0,  # addcoupons[i],
                waittime,
                tbbox[0],
                tbbox[1],
                sst.expInfo[0], sst.expInfo[1], sst.expInfo[2], sst.expInfo[3], sst.expInfo[4],
                sst.seat.player.chip
            ]

            # 地主v3.773特效需要知道上一个大师分等级图标
            # 传两个大图
            skilscoreinfo = sst.skillscoreInfo
            masterlevel = skilscoreinfo['level']
            curlevelpic = skillscore.get_skill_score_big_level_pic(masterlevel)
            lastlevelpic = skillscore.get_skill_score_big_level_pic(masterlevel - 1)
            skilscoreinfo['lastbiglevelpic'] = lastlevelpic
            skilscoreinfo['curbiglevelpic'] = curlevelpic

            seatDetails.append(details)
            winStreak.append(sst.winStreak)
            skillScoreInfos.append(skilscoreinfo)
            cards.append(sst.seat.status.cards)
            addCoupons.append(0)
            seatInfos.append({'punished': 1} if sst.isPunish else {})
            luckyItemArgs.append(datas.get('luckyArgs', {}))

        return {
            'winStreak':winStreak,
            'luckyItemArgs':luckyItemArgs,
            'skillScoreInfos':skillScoreInfos,
            'addcoupons':addCoupons,
            'cards':cards,
            'seatDetails':seatDetails,
            'seatInfos':seatInfos,
            'kickOutCoinTip':'点击继续，将自动将您\n桌面金币补充至%s。\n继续努力吧！' % self.table.room.roomConf['buyinchip']
        }

    def sendWinloseRes(self, result):
        details = self.buildResultDetails(result)
        mp = self.buildWinloseRes(result, details, 1)
        # 免费场开关
        freeFeeSwitch = self.table.room.roomConf.get('freeFeeSwitch', 0)
        mp.setResult('free', freeFeeSwitch)

        for index, seat in enumerate(self.table.seats):
            isKickOutCoin = 0
            if seat.player and not seat.isGiveup:
                ssts = result.seatStatements
                # 是否达到踢出值
                isLowerKickOutCoin = True if ssts[index].final < self.table.room.roomConf.get('kickOutCoin', 0) else False

                # 不踢出
                if isLowerKickOutCoin and seat.player.chip < self.table.room.roomConf['buyinchip']:
                    isKickOutCoin = 1

                # 点击继续的提醒
                mp.rmResult('kickOutCoinTip')
                if isLowerKickOutCoin and seat.player.chip >= self.table.room.roomConf['buyinchip']:
                    mp.setResult('kickOutCoinTip', details.get('kickOutCoinTip'))

                # 是否达到踢出值
                mp.setResult('isKickOutCoin', isKickOutCoin)
                # 破产埋点Id
                kickOutBurialId = self.table.room.roomConf.get('kickOutBurialId')
                mp.setResult('kickOutBurialId', kickOutBurialId)
                # 首败分享埋点
                mp.rmResult('firstLoseBurialId')
                if seat.player.isFirstLose(ssts[index].isWin):
                    firstLoseBurialId = self.table.room.roomConf.get('firstLoseBurialId')
                    mp.setResult('firstLoseBurialId', firstLoseBurialId)

                # 服务费字段
                mp.setResult('room_fee', ssts[index].fee + ssts[index].fixedFee)
                router.sendToUser(mp, seat.userId)
